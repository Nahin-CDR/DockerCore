# ----------------------------------------
#  map block: URL path er base e kon service e pathabo ta define kora hoy ekhane
# Example:
# /auth/login   ‚Üí auth-service:3000
# /user/profile ‚Üí user-service:3000
# /              ‚Üí frontend (default)
# ----------------------------------------


# ----------------- uri = Uniform Resource Identifier ------------------------------
# üì¶ map $uri $target_service:
# $uri holo client er request path (e.g. /auth/login, /user/profile)
# ei map block e amra URL path er base e kon service e forward korbo ta define kori

# üîç Example:
# ‚ñ∂Ô∏è $uri = /auth/login     ‚Üí match kore /auth ‚Üí auth-service e pathabe
# ‚ñ∂Ô∏è $uri = /user/profile   ‚Üí match kore /user ‚Üí user-service e pathabe
# ‚ñ∂Ô∏è $uri = /order/123      ‚Üí match kore /order ‚Üí order-service e pathabe
# ‚ñ∂Ô∏è $uri = /               ‚Üí kono match na paile default ‚Üí frontend e pathabe

# üß† map block e jei value match kore, oi value assign hoy $target_service e
# pore proxy_pass $target_service diye shei service e request pathai

# Note: ^ mane line er start e match korbe, ~ mane regex match korche
# -----------------------------------------------



# ----------------------------------------------
# üîç $uri mane holo request er URL path part
# full URL er moddhe domain er porer ja thake tai $uri
#
# Example (URL vs $uri):
# Full URL                             | $uri value
# ------------------------------------|---------------------
# http://localhost:8080/              | /
# http://localhost:8080/auth/login    | /auth/login
# http://localhost:8080/user/45/edit  | /user/45/edit
#
# ei $uri er upor base kore Nginx map block e kon service e pathabe ta decide kore
# ----------------------------------------------




map $uri $target_service {
    ~^/auth   http://auth-service:3000;
    ~^/user   http://user-service:3000;
    ~^/order  http://order-service:3000;
    default   http://frontend:80;   # Jodi kono match na pai, frontend e pathabe (e.g. /, /home)
}

# ----------------------------------------
# üåê server block: Nginx ei server e HTTP request handle korbe
# listen 80 = default HTTP port
# ----------------------------------------

server {
    listen 80;

    # ----------------------------------------
    # location /: Sob request ei location block e dhukbe
    # map theke $target_service ber kore proxy_pass diye forward kora hobe
    # ----------------------------------------

    location / {
        proxy_pass $target_service;  # Dynamic vabe route kore specific service e pathabe

        # Extra headers for backend logging & IP tracking
        proxy_set_header Host $host;                           # Client er original host
        proxy_set_header X-Real-IP $remote_addr;               # Client er IP
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;  # Proxy chain er IP list

        proxy_intercept_errors on;  # Jodi backend e kono error hoy (403, 404, 502 etc.), Nginx nijer page dekhabe

        # üéØ Custom error page setup:
        error_page 502 /502.html;
        error_page 403 /403.html;
        error_page 404 /404.html;
    }

    # ----------------------------------------
    # Error page routes (502, 403, 404)
    # Ei file gulo frontend folder e thakbe: 502.html, 403.html, 404.html
    # ----------------------------------------



    location = /502.html {
        # 502 = backend unavailable
        root /usr/share/nginx/html;   # Docker container e je path e file gula serve hocche
    }

    location = /403.html {
        # 403 = access forbidden (auth fail, permission)
        root /usr/share/nginx/html;  # Docker container e je path e file gula serve hocche
    }

    location = /404.html {
        # 404 = page not found (wrong path or static file missing)
        root /usr/share/nginx/html;  # Docker container e je path e file gula serve hocche
    }
}
